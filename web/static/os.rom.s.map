{"src_units":{"units":[{"id":0,"name":"intermediate assembly","source":".org $E000\n\n\nentry:\n\n__L000013_:\n\t; os.hsl:17:5: inline_asm \"\n\t; inline_asm\n\t\n        JMP memtest_zeropage\n    post_memtest_zeropage:\n    \n\t; os.hsl:23:5: DATA_STACK_POINTER = 3;\n\t; copy Immediate(U8, Number(3)) => Global(0)\n\tLDA\t#3\n\t; os.hsl:26:5: kernel_main();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 708 }, offset: FrameSize(16) }\n\tSTA\t$00\n\tCLC\t\n\tADC\t#1\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 708 }, destination: UnresolvedGlobal(16) }\n\tSTA\t$00\n\tJSR\tkernel_main\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 708 }, offset: NegativeFrameSize(16) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#255\n\tTAX\t\n\t; os.hsl:27:5: goto halt;\n\t; goto 10\n\tSTA\t$00\n\tJMP\thalt\n\nhalt:\n\n__L000014_:\n\t; os.hsl:31:5: goto halt;\n\t; goto 10\n\tJMP\thalt\n\nmemtest:\n\n__L000015_:\n\nvideo_init:\n\n__L000016_:\n\t; os.hsl:53:5: REG_IOP1 = REG_IOP1_CMD_SET_MODE;\n\t; copy Immediate(U8, Number(2)) => Global(57342)\n\tLDA\t#2\n\t; os.hsl:54:5: REG_IOP1 = 0x00;\n\t; copy Immediate(U8, Number(0)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#0\n\t; os.hsl:57:5: REG_IOP1 = REG_IOP1_CMD_CLR_SCR;\n\t; copy Immediate(U8, Number(1)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#1\n\t; os.hsl:60:5: REG_IOP1 = REG_IOP1_CMD_SET_POSITION;\n\t; copy Immediate(U8, Number(3)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#3\n\t; os.hsl:61:5: REG_IOP1 = 0x00;\n\t; copy Immediate(U8, Number(0)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#0\n\t; os.hsl:62:5: REG_IOP1 = 0x00;\n\t; copy Immediate(U8, Number(0)) => Global(57342)\n\t; os.hsl:63:5: return;\n\t; rts\n\tSTA\t$DFFE\n\tSTA\t$DFFE\n\tRTS\t\n\nvideo_printstr:\n\n__L000017_:\n\t; os.hsl:67:5: var index: u16 = 0;\n\t; copy Immediate(U8, Number(0)) => FrameOffset(13, 3)\n\tLDA\t#0\n\tLDX\t$00\n\t; copy Immediate(U8, Number(0)) => FrameOffset(13, 2)\n\tSTA\t$F7, X\n\tSTA\t$F8, X\n\n__L000018_:\n\t; os.hsl:68:11: str[index] != 0 do\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(13, 1), debug: Some(\"hi:str[]\") }) => FrameOffset(13, 6)\n\tLDX\t$00\n\tLDA\t$F6, X\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(13, 0), debug: Some(\"lo:str[]\") }) => FrameOffset(13, 5)\n\tSTA\t$FB, X\n\tLDA\t$F5, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(13, 5), debug: Some(\"lo:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(13, 2), debug: Some(\"lo:index\") }) => FrameOffset(13, 5)\n\tSTA\t$FA, X\n\tCLC\t\n\tADC\t$F7, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(13, 6), debug: Some(\"hi:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(13, 3), debug: Some(\"hi:index\") }) => FrameOffset(13, 6)\n\tSTA\t$FA, X\n\tLDA\t$FB, X\n\tADC\t$F8, X\n\tSTA\t$FB, X\n\n__L00001B_:\n\t; os.hsl:68:11: str[index] != 0 do\n\t; compare Memory(MemoryData { base_type: U8, location: FrameOffsetIndirect(13, 5), debug: Some(\"indexed:str\") }) and Immediate(U8, Number(0)); branch to Some(29) on Zero set, and to None on Zero clear\n\tLDX\t$00\n\tLDA\t($FA, X)\n\tCMP\t#0\n\tBEQ\t__L00001D_\n\n__L00001C_:\n\t; os.hsl:68:11: str[index] != 0 do\n\t; copy Immediate(U8, Number(1)) => FrameOffset(13, 4)\n\tLDA\t#1\n\tLDX\t$00\n\t; goto 30\n\tSTA\t$F9, X\n\tJMP\t__L00001E_\n\n__L00001D_:\n\t; os.hsl:68:11: str[index] != 0 do\n\t; copy Immediate(U8, Number(0)) => FrameOffset(13, 4)\n\tLDA\t#0\n\tLDX\t$00\n\tSTA\t$F9, X\n\n__L00001E_:\n\t; os.hsl:68:5: while str[index] != 0 do\n\t; branch to 34 if Memory(MemoryData { base_type: U8, location: FrameOffset(13, 4), debug: None }) == 0\n\tLDX\t$00\n\tLDA\t$F9, X\n\tBEQ\t__L000022_\n\n__L00001F_:\n\t; os.hsl:69:9: REG_IOP1 = REG_IOP1_CMD_SET_VALUE;\n\t; copy Immediate(U8, Number(5)) => Global(57342)\n\tLDA\t#5\n\t; os.hsl:70:20: str[index];\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(13, 1), debug: Some(\"hi:str[]\") }) => FrameOffset(13, 8)\n\tLDX\t$00\n\tSTA\t$DFFE\n\tLDA\t$F6, X\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(13, 0), debug: Some(\"lo:str[]\") }) => FrameOffset(13, 7)\n\tSTA\t$FD, X\n\tLDA\t$F5, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(13, 7), debug: Some(\"lo:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(13, 2), debug: Some(\"lo:index\") }) => FrameOffset(13, 7)\n\tSTA\t$FC, X\n\tCLC\t\n\tADC\t$F7, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(13, 8), debug: Some(\"hi:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(13, 3), debug: Some(\"hi:index\") }) => FrameOffset(13, 8)\n\tSTA\t$FC, X\n\tLDA\t$FD, X\n\tADC\t$F8, X\n\t; os.hsl:70:9: REG_IOP1 = str[index];\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffsetIndirect(13, 7), debug: Some(\"indexed:str\") }) => Global(57342)\n\tSTA\t$FD, X\n\tLDA\t($FC, X)\n\t; os.hsl:71:17: index + 1;\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(13, 2), debug: Some(\"lo:index\") }) + Immediate(U8, Number(1)) => FrameOffset(13, 9)\n\tSTA\t$DFFE\n\tLDA\t$F7, X\n\tCLC\t\n\tADC\t#1\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(13, 3), debug: Some(\"hi:index\") }) + Immediate(U8, Number(0)) => FrameOffset(13, 10)\n\tSTA\t$FE, X\n\tLDA\t$F8, X\n\tADC\t#0\n\t; os.hsl:71:9: index = index + 1;\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(13, 10), debug: None }) => FrameOffset(13, 3)\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(13, 9), debug: None }) => FrameOffset(13, 2)\n\tSTA\t$F8, X\n\tSTA\t$FF, X\n\tLDA\t$FE, X\n\t; os.hsl:68:5: while str[index] != 0 do\n\t; goto 24\n\tSTA\t$F7, X\n\tJMP\t__L000018_\n\n__L000022_:\n\n__L000023_:\n\t; os.hsl:73:5: return;\n\t; rts\n\tRTS\t\n\nkernel_main:\n\n__L000024_:\n\t; os.hsl:77:5: video_init();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1753 }, offset: FrameSize(12) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 1753 }, destination: UnresolvedGlobal(12) }\n\tSTA\t$00\n\tJSR\tvideo_init\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1753 }, offset: NegativeFrameSize(12) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; os.hsl:78:5: memtest();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1771 }, offset: FrameSize(11) }\n\tSTA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 1771 }, destination: UnresolvedGlobal(11) }\n\tSTA\t$00\n\tJSR\tmemtest\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1771 }, offset: NegativeFrameSize(11) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; copy Memory(MemoryData { base_type: U8, location: Global(1), debug: None }) => FrameOffset(16, 0)\n\tSTA\t$00\n\tLDA\t$0001\n\tLDX\t$00\n\t; os.hsl:79:5: logo();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1786 }, offset: FrameSize(18) }\n\tSTA\t$FF, X\n\tTXA\t\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 1786 }, destination: UnresolvedGlobal(18) }\n\tSTA\t$00\n\tJSR\tlogo\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1786 }, offset: NegativeFrameSize(18) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; os.hsl:80:5: return;\n\t; rts\n\tSTA\t$00\n\tRTS\t\n\nlogo:\n\n__L000026_:\n\t; os.hsl:103:5: video_printstr(logo_str);\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 2782 }, offset: FrameSize(13) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#11\n\tTAX\t\n\t; copy Memory(MemoryData { base_type: U8, location: UnresolvedGlobalHighByte(17), debug: None }) => FrameOffset(13, 1)\n\tSTA\t$00\n\tLDA\t#>logo_str\n\tLDX\t$00\n\t; copy Memory(MemoryData { base_type: U8, location: UnresolvedGlobalLowByte(17), debug: None }) => FrameOffset(13, 0)\n\tSTA\t$F6, X\n\tLDA\t#<logo_str\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 2782 }, destination: UnresolvedGlobal(13) }\n\tSTA\t$F5, X\n\tJSR\tvideo_printstr\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 2782 }, offset: NegativeFrameSize(13) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#245\n\tTAX\t\n\t; os.hsl:104:5: return;\n\t; rts\n\tSTA\t$00\n\tRTS\t\n\t; os.hsl:107:1: inline_asm \".include \\\"memtest.asm\\\"\";\n\t; inline_asm\n\t.include \"memtest.asm\"\n\nlogo_str:\t.byte\tn\n.org\t$FFFA\n.vector\thalt\n.vector\tentry\n.vector\thalt\n"},{"id":1,"name":"memtest.asm","source":"; Tests the zeropage\nmemtest_zeropage:\n\t; Test 0x0000 alone so that it can be used the rest of the time for iteration\n\tLDA\t#$55\n\tSTA\t$00\n\tLDA\t#$00\n\tLDA\t$00\n\tCMP\t#$55\n\tBEQ\t_memtest_zero_page\n\tJMP\t_memtest_hlt\n\n_memtest_zero_page:\n\t;\n\t; Test the zero page\n\t;\n\tLDX\t#$01\n_zp_lp1:\t\t\t; Iterate over the entire zero page and store/load the test pattern\n\tLDA\t#$55\n\tSTA\t($00, X)\n\tINX\n\tBNE\t_zp_lp1\n\n\tLDA\t#$00\n\tLDX\t#$01\n_zp_lp2:\n\tLDA\t($00, X)\n\tCMP\t#$55\n\tBEQ\t_zp_pass\n\tJMP\t_memtest_hlt\n_zp_pass:\n\tINX\n\tBNE\t_zp_lp2\n\tJMP\tpost_memtest_zeropage\n\n; There's not much we can do if the zeropage is broken, so just halt\n_memtest_hlt:\n\tJMP\t_memtest_hlt\n"}]},"entries":[{"unit":0,"offset":86,"line":10,"address":57344},{"unit":0,"offset":226,"line":15,"address":57347},{"unit":0,"offset":366,"line":18,"address":57349},{"unit":0,"offset":375,"line":19,"address":57351},{"unit":0,"offset":381,"line":20,"address":57352},{"unit":0,"offset":389,"line":21,"address":57354},{"unit":0,"offset":494,"line":23,"address":57355},{"unit":0,"offset":503,"line":24,"address":57357},{"unit":0,"offset":629,"line":26,"address":57360},{"unit":0,"offset":638,"line":27,"address":57362},{"unit":0,"offset":644,"line":28,"address":57363},{"unit":0,"offset":654,"line":29,"address":57365},{"unit":0,"offset":698,"line":32,"address":57366},{"unit":0,"offset":707,"line":33,"address":57368},{"unit":0,"offset":775,"line":40,"address":57371},{"unit":0,"offset":934,"line":51,"address":57374},{"unit":0,"offset":1025,"line":54,"address":57376},{"unit":0,"offset":1036,"line":55,"address":57379},{"unit":0,"offset":1143,"line":58,"address":57381},{"unit":0,"offset":1154,"line":59,"address":57384},{"unit":0,"offset":1266,"line":62,"address":57386},{"unit":0,"offset":1277,"line":63,"address":57389},{"unit":0,"offset":1368,"line":66,"address":57391},{"unit":0,"offset":1379,"line":67,"address":57394},{"unit":0,"offset":1501,"line":72,"address":57396},{"unit":0,"offset":1512,"line":73,"address":57399},{"unit":0,"offset":1523,"line":74,"address":57402},{"unit":0,"offset":1650,"line":81,"address":57403},{"unit":0,"offset":1658,"line":82,"address":57405},{"unit":0,"offset":1722,"line":84,"address":57407},{"unit":0,"offset":1734,"line":85,"address":57409},{"unit":0,"offset":1917,"line":90,"address":57411},{"unit":0,"offset":1926,"line":91,"address":57413},{"unit":0,"offset":2060,"line":93,"address":57415},{"unit":0,"offset":2072,"line":94,"address":57417},{"unit":0,"offset":2303,"line":96,"address":57419},{"unit":0,"offset":2315,"line":97,"address":57421},{"unit":0,"offset":2321,"line":98,"address":57422},{"unit":0,"offset":2552,"line":100,"address":57424},{"unit":0,"offset":2564,"line":101,"address":57426},{"unit":0,"offset":2576,"line":102,"address":57428},{"unit":0,"offset":2588,"line":103,"address":57430},{"unit":0,"offset":2851,"line":108,"address":57432},{"unit":0,"offset":2860,"line":109,"address":57434},{"unit":0,"offset":2874,"line":110,"address":57436},{"unit":0,"offset":2882,"line":111,"address":57438},{"unit":0,"offset":3002,"line":116,"address":57440},{"unit":0,"offset":3010,"line":117,"address":57442},{"unit":0,"offset":3030,"line":119,"address":57444},{"unit":0,"offset":3042,"line":120,"address":57446},{"unit":0,"offset":3162,"line":125,"address":57449},{"unit":0,"offset":3170,"line":126,"address":57451},{"unit":0,"offset":3179,"line":127,"address":57453},{"unit":0,"offset":3349,"line":132,"address":57455},{"unit":0,"offset":3358,"line":133,"address":57457},{"unit":0,"offset":3370,"line":134,"address":57459},{"unit":0,"offset":3500,"line":139,"address":57461},{"unit":0,"offset":3659,"line":142,"address":57463},{"unit":0,"offset":3668,"line":143,"address":57465},{"unit":0,"offset":3679,"line":144,"address":57468},{"unit":0,"offset":3813,"line":146,"address":57470},{"unit":0,"offset":3825,"line":147,"address":57472},{"unit":0,"offset":4056,"line":149,"address":57474},{"unit":0,"offset":4068,"line":150,"address":57476},{"unit":0,"offset":4074,"line":151,"address":57477},{"unit":0,"offset":4305,"line":153,"address":57479},{"unit":0,"offset":4317,"line":154,"address":57481},{"unit":0,"offset":4329,"line":155,"address":57483},{"unit":0,"offset":4508,"line":158,"address":57485},{"unit":0,"offset":4520,"line":159,"address":57487},{"unit":0,"offset":4710,"line":162,"address":57489},{"unit":0,"offset":4721,"line":163,"address":57492},{"unit":0,"offset":4733,"line":164,"address":57494},{"unit":0,"offset":4739,"line":165,"address":57495},{"unit":0,"offset":4896,"line":167,"address":57497},{"unit":0,"offset":4908,"line":168,"address":57499},{"unit":0,"offset":4920,"line":169,"address":57501},{"unit":0,"offset":5184,"line":173,"address":57503},{"unit":0,"offset":5196,"line":174,"address":57505},{"unit":0,"offset":5208,"line":175,"address":57507},{"unit":0,"offset":5272,"line":178,"address":57509},{"unit":0,"offset":5284,"line":179,"address":57511},{"unit":0,"offset":5357,"line":186,"address":57514},{"unit":0,"offset":5522,"line":193,"address":57515},{"unit":0,"offset":5531,"line":194,"address":57517},{"unit":0,"offset":5537,"line":195,"address":57518},{"unit":0,"offset":5545,"line":196,"address":57520},{"unit":0,"offset":5651,"line":198,"address":57521},{"unit":0,"offset":5660,"line":199,"address":57523},{"unit":0,"offset":5786,"line":201,"address":57526},{"unit":0,"offset":5795,"line":202,"address":57528},{"unit":0,"offset":5801,"line":203,"address":57529},{"unit":0,"offset":5809,"line":204,"address":57531},{"unit":0,"offset":5944,"line":207,"address":57532},{"unit":0,"offset":5953,"line":208,"address":57534},{"unit":0,"offset":5959,"line":209,"address":57535},{"unit":0,"offset":5967,"line":210,"address":57537},{"unit":0,"offset":6073,"line":212,"address":57538},{"unit":0,"offset":6082,"line":213,"address":57540},{"unit":0,"offset":6205,"line":215,"address":57543},{"unit":0,"offset":6214,"line":216,"address":57545},{"unit":0,"offset":6220,"line":217,"address":57546},{"unit":0,"offset":6228,"line":218,"address":57548},{"unit":0,"offset":6335,"line":220,"address":57549},{"unit":0,"offset":6344,"line":221,"address":57551},{"unit":0,"offset":6355,"line":222,"address":57553},{"unit":0,"offset":6490,"line":225,"address":57555},{"unit":0,"offset":6502,"line":226,"address":57557},{"unit":0,"offset":6508,"line":227,"address":57558},{"unit":0,"offset":6514,"line":228,"address":57559},{"unit":0,"offset":6522,"line":229,"address":57561},{"unit":0,"offset":6628,"line":231,"address":57562},{"unit":0,"offset":6637,"line":232,"address":57564},{"unit":0,"offset":6757,"line":234,"address":57567},{"unit":0,"offset":6766,"line":235,"address":57569},{"unit":0,"offset":6772,"line":236,"address":57570},{"unit":0,"offset":6780,"line":237,"address":57572},{"unit":0,"offset":6817,"line":240,"address":57573},{"unit":0,"offset":6826,"line":241,"address":57575},{"unit":0,"offset":6997,"line":248,"address":57576},{"unit":0,"offset":7006,"line":249,"address":57578},{"unit":0,"offset":7012,"line":250,"address":57579},{"unit":0,"offset":7021,"line":251,"address":57581},{"unit":0,"offset":7147,"line":253,"address":57582},{"unit":0,"offset":7156,"line":254,"address":57584},{"unit":0,"offset":7172,"line":255,"address":57586},{"unit":0,"offset":7300,"line":257,"address":57588},{"unit":0,"offset":7312,"line":258,"address":57590},{"unit":0,"offset":7428,"line":260,"address":57592},{"unit":0,"offset":7440,"line":261,"address":57594},{"unit":0,"offset":7570,"line":263,"address":57597},{"unit":0,"offset":7579,"line":264,"address":57599},{"unit":0,"offset":7585,"line":265,"address":57600},{"unit":0,"offset":7595,"line":266,"address":57602},{"unit":0,"offset":7633,"line":269,"address":57603},{"unit":0,"offset":7642,"line":270,"address":57605},{"unit":1,"offset":119,"line":4,"address":57606},{"unit":1,"offset":129,"line":5,"address":57608},{"unit":1,"offset":138,"line":6,"address":57610},{"unit":1,"offset":148,"line":7,"address":57612},{"unit":1,"offset":157,"line":8,"address":57614},{"unit":1,"offset":167,"line":9,"address":57616},{"unit":1,"offset":191,"line":10,"address":57618},{"unit":1,"offset":258,"line":16,"address":57621},{"unit":1,"offset":347,"line":18,"address":57623},{"unit":1,"offset":357,"line":19,"address":57625},{"unit":1,"offset":371,"line":20,"address":57627},{"unit":1,"offset":376,"line":21,"address":57628},{"unit":1,"offset":390,"line":23,"address":57630},{"unit":1,"offset":400,"line":24,"address":57632},{"unit":1,"offset":419,"line":26,"address":57634},{"unit":1,"offset":433,"line":27,"address":57636},{"unit":1,"offset":443,"line":28,"address":57638},{"unit":1,"offset":457,"line":29,"address":57640},{"unit":1,"offset":485,"line":31,"address":57643},{"unit":1,"offset":490,"line":32,"address":57644},{"unit":1,"offset":503,"line":33,"address":57646},{"unit":1,"offset":614,"line":37,"address":57649}]}