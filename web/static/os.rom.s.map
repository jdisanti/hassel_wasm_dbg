{"src_units":{"units":[{"id":0,"name":"intermediate assembly","source":".org $E000\n\n\nentry:\n\n__L000016_:\n\t; os.hsl:17:5: inline_asm \"\n\t; inline_asm\n\t\n\tJMP memtest_zeropage\npost_memtest_zeropage:\n    \n\t; os.hsl:23:5: inline_asm \"\n\t; inline_asm\n\t\n\tLDX\t#$FF\n\tTXS\n    \n\t; os.hsl:29:5: DATA_STACK_POINTER = 3;\n\t; copy Immediate(U8, Number(3)) => Global(0)\n\tLDA\t#3\n\t; os.hsl:32:5: kernel_main();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 774 }, offset: FrameSize(19) }\n\tSTA\t$00\n\tCLC\t\n\tADC\t#1\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 774 }, destination: UnresolvedGlobal(19) }\n\tSTA\t$00\n\tJSR\tkernel_main\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 774 }, offset: NegativeFrameSize(19) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#255\n\tTAX\t\n\t; os.hsl:33:5: goto halt;\n\t; goto 10\n\tSTA\t$00\n\tJMP\thalt\n\nhalt:\n\n__L000017_:\n\t; os.hsl:37:5: goto halt;\n\t; goto 10\n\tJMP\thalt\n\nmemtest:\n\n__L000018_:\n\t; os.hsl:44:5: var index: u16 = 0;\n\t; copy Immediate(U8, Number(0)) => FrameOffset(11, 1)\n\tLDA\t#0\n\tLDX\t$00\n\t; copy Immediate(U8, Number(0)) => FrameOffset(11, 0)\n\tSTA\t$F7, X\n\tSTA\t$F8, X\n\n__L000019_:\n\n__L00001B_:\n\t; os.hsl:45:11: index < end_index do\n\t; compare Memory(MemoryData { base_type: U8, location: FrameOffset(11, 1), debug: Some(\"hi:index\") }) and Immediate(U8, Number(222)); branch to None on Carry set, and to Some(30) on Carry clear\n\tLDX\t$00\n\tLDA\t$F8, X\n\tCMP\t#222\n\tBCC\t__L00001E_\n\n__L00001C_:\n\t; os.hsl:45:11: index < end_index do\n\t; compare Memory(MemoryData { base_type: U8, location: FrameOffset(11, 0), debug: Some(\"lo:index\") }) and Immediate(U8, Number(254)); branch to None on Carry set, and to Some(30) on Carry clear\n\tLDX\t$00\n\tLDA\t$F7, X\n\tCMP\t#254\n\tBCC\t__L00001E_\n\n__L00001D_:\n\t; os.hsl:45:11: index < end_index do\n\t; copy Immediate(U8, Number(0)) => FrameOffset(11, 2)\n\tLDA\t#0\n\tLDX\t$00\n\t; goto 31\n\tSTA\t$F9, X\n\tJMP\t__L00001F_\n\n__L00001E_:\n\t; os.hsl:45:11: index < end_index do\n\t; copy Immediate(U8, Number(1)) => FrameOffset(11, 2)\n\tLDA\t#1\n\tLDX\t$00\n\tSTA\t$F9, X\n\n__L00001F_:\n\t; os.hsl:45:5: while index < end_index do\n\t; branch to 44 if Memory(MemoryData { base_type: U8, location: FrameOffset(11, 2), debug: None }) == 0\n\tLDX\t$00\n\tLDA\t$F9, X\n\tBEQ\t__L00002C_\n\n__L000020_:\n\t; os.hsl:46:9: ptr[index] = 0x55;\n\t; copy Immediate(U8, Number(85)) => GlobalIndexed(256, Memory(MemoryData { base_type: U16, location: FrameOffset(11, 0), debug: Some(\"index\") }))\n\tLDA\t#85\n\tLDX\t$00\n\tLDY\t$F7, X\n\t; os.hsl:45:5: while index < end_index do\n\t; goto 25\n\tSTA\t$0100, Y\n\tJMP\t__L000019_\n\n__L000021_:\n\n__L000023_:\n\t; os.hsl:47:12: ptr[index] != 0x55 then\n\t; compare Memory(MemoryData { base_type: U8, location: GlobalIndexed(256, Memory(MemoryData { base_type: U16, location: FrameOffset(11, 0), debug: Some(\"index\") })), debug: Some(\"ptr[]\") }) and Immediate(U8, Number(85)); branch to Some(37) on Zero set, and to None on Zero clear\n\tLDX\t$00\n\tLDY\t$F7, X\n\tLDA\t$0100, Y\n\tCMP\t#85\n\tBEQ\t__L000025_\n\n__L000024_:\n\t; os.hsl:47:12: ptr[index] != 0x55 then\n\t; copy Immediate(U8, Number(1)) => FrameOffset(11, 4)\n\tLDA\t#1\n\tLDX\t$00\n\t; goto 38\n\tSTA\t$FB, X\n\tJMP\t__L000026_\n\n__L000025_:\n\t; os.hsl:47:12: ptr[index] != 0x55 then\n\t; copy Immediate(U8, Number(0)) => FrameOffset(11, 4)\n\tLDA\t#0\n\tLDX\t$00\n\tSTA\t$FB, X\n\n__L000026_:\n\t; os.hsl:47:9: if ptr[index] != 0x55 then\n\t; branch to 40 if Memory(MemoryData { base_type: U8, location: FrameOffset(11, 4), debug: None }) == 0\n\tLDX\t$00\n\tLDA\t$FB, X\n\tBEQ\t__L000028_\n\n__L000027_:\n\t; os.hsl:48:13: return 0;\n\t; copy Immediate(U8, Number(0)) => Global(1)\n\tLDA\t#0\n\t; rts\n\tSTA\t$01\n\tRTS\t\n\t; os.hsl:47:9: if ptr[index] != 0x55 then\n\t; goto 42\n\tJMP\t__L00002A_\n\n__L000028_:\n\t; os.hsl:50:13: ptr[index] = 0;\n\t; copy Immediate(U8, Number(0)) => GlobalIndexed(256, Memory(MemoryData { base_type: U16, location: FrameOffset(11, 0), debug: Some(\"index\") }))\n\tLDA\t#0\n\tLDX\t$00\n\tLDY\t$F7, X\n\t; os.hsl:51:21: index + 1;\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(11, 0), debug: Some(\"lo:index\") }) + Immediate(U8, Number(1)) => FrameOffset(11, 5)\n\tSTA\t$0100, Y\n\tLDA\t$F7, X\n\tCLC\t\n\tADC\t#1\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(11, 1), debug: Some(\"hi:index\") }) + Immediate(U8, Number(0)) => FrameOffset(11, 6)\n\tSTA\t$FC, X\n\tLDA\t$F8, X\n\tADC\t#0\n\t; os.hsl:51:13: index = index + 1;\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(11, 6), debug: None }) => FrameOffset(11, 1)\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(11, 5), debug: None }) => FrameOffset(11, 0)\n\tSTA\t$F8, X\n\tSTA\t$FD, X\n\tLDA\t$FC, X\n\tSTA\t$F7, X\n\n__L00002A_:\n\n__L00002B_:\n\n__L00002C_:\n\n__L00002D_:\n\t; os.hsl:54:5: return 1;\n\t; copy Immediate(U8, Number(1)) => Global(1)\n\tLDA\t#1\n\t; rts\n\tSTA\t$01\n\tRTS\t\n\nvideo_init:\n\n__L00002E_:\n\t; os.hsl:59:5: REG_IOP1 = REG_IOP1_CMD_SET_MODE;\n\t; copy Immediate(U8, Number(2)) => Global(57342)\n\tLDA\t#2\n\t; os.hsl:60:5: REG_IOP1 = 0x00;\n\t; copy Immediate(U8, Number(0)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#0\n\t; os.hsl:63:5: REG_IOP1 = REG_IOP1_CMD_CLR_SCR;\n\t; copy Immediate(U8, Number(1)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#1\n\t; os.hsl:66:5: REG_IOP1 = REG_IOP1_CMD_SET_POSITION;\n\t; copy Immediate(U8, Number(3)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#3\n\t; os.hsl:67:5: REG_IOP1 = 0x00;\n\t; copy Immediate(U8, Number(0)) => Global(57342)\n\tSTA\t$DFFE\n\tLDA\t#0\n\t; os.hsl:68:5: REG_IOP1 = 0x00;\n\t; copy Immediate(U8, Number(0)) => Global(57342)\n\t; os.hsl:69:5: return;\n\t; rts\n\tSTA\t$DFFE\n\tSTA\t$DFFE\n\tRTS\t\n\nvideo_printstr:\n\n__L00002F_:\n\t; os.hsl:73:5: var index: u16 = 0;\n\t; copy Immediate(U8, Number(0)) => FrameOffset(16, 3)\n\tLDA\t#0\n\tLDX\t$00\n\t; copy Immediate(U8, Number(0)) => FrameOffset(16, 2)\n\tSTA\t$F7, X\n\tSTA\t$F8, X\n\n__L000030_:\n\t; os.hsl:74:11: str[index] != 0 do\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(16, 1), debug: Some(\"hi:str[]\") }) => FrameOffset(16, 6)\n\tLDX\t$00\n\tLDA\t$F6, X\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(16, 0), debug: Some(\"lo:str[]\") }) => FrameOffset(16, 5)\n\tSTA\t$FB, X\n\tLDA\t$F5, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(16, 5), debug: Some(\"lo:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(16, 2), debug: Some(\"lo:index\") }) => FrameOffset(16, 5)\n\tSTA\t$FA, X\n\tCLC\t\n\tADC\t$F7, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(16, 6), debug: Some(\"hi:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(16, 3), debug: Some(\"hi:index\") }) => FrameOffset(16, 6)\n\tSTA\t$FA, X\n\tLDA\t$FB, X\n\tADC\t$F8, X\n\tSTA\t$FB, X\n\n__L000033_:\n\t; os.hsl:74:11: str[index] != 0 do\n\t; compare Memory(MemoryData { base_type: U8, location: FrameOffsetIndirect(16, 5), debug: Some(\"indexed:str\") }) and Immediate(U8, Number(0)); branch to Some(53) on Zero set, and to None on Zero clear\n\tLDX\t$00\n\tLDA\t($FA, X)\n\tCMP\t#0\n\tBEQ\t__L000035_\n\n__L000034_:\n\t; os.hsl:74:11: str[index] != 0 do\n\t; copy Immediate(U8, Number(1)) => FrameOffset(16, 4)\n\tLDA\t#1\n\tLDX\t$00\n\t; goto 54\n\tSTA\t$F9, X\n\tJMP\t__L000036_\n\n__L000035_:\n\t; os.hsl:74:11: str[index] != 0 do\n\t; copy Immediate(U8, Number(0)) => FrameOffset(16, 4)\n\tLDA\t#0\n\tLDX\t$00\n\tSTA\t$F9, X\n\n__L000036_:\n\t; os.hsl:74:5: while str[index] != 0 do\n\t; branch to 58 if Memory(MemoryData { base_type: U8, location: FrameOffset(16, 4), debug: None }) == 0\n\tLDX\t$00\n\tLDA\t$F9, X\n\tBEQ\t__L00003A_\n\n__L000037_:\n\t; os.hsl:75:9: REG_IOP1 = REG_IOP1_CMD_SET_VALUE;\n\t; copy Immediate(U8, Number(5)) => Global(57342)\n\tLDA\t#5\n\t; os.hsl:76:20: str[index];\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(16, 1), debug: Some(\"hi:str[]\") }) => FrameOffset(16, 8)\n\tLDX\t$00\n\tSTA\t$DFFE\n\tLDA\t$F6, X\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(16, 0), debug: Some(\"lo:str[]\") }) => FrameOffset(16, 7)\n\tSTA\t$FD, X\n\tLDA\t$F5, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(16, 7), debug: Some(\"lo:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(16, 2), debug: Some(\"lo:index\") }) => FrameOffset(16, 7)\n\tSTA\t$FC, X\n\tCLC\t\n\tADC\t$F7, X\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(16, 8), debug: Some(\"hi:tmp_str[]\") }) + Memory(MemoryData { base_type: U8, location: FrameOffset(16, 3), debug: Some(\"hi:index\") }) => FrameOffset(16, 8)\n\tSTA\t$FC, X\n\tLDA\t$FD, X\n\tADC\t$F8, X\n\t; os.hsl:76:9: REG_IOP1 = str[index];\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffsetIndirect(16, 7), debug: Some(\"indexed:str\") }) => Global(57342)\n\tSTA\t$FD, X\n\tLDA\t($FC, X)\n\t; os.hsl:77:17: index + 1;\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(16, 2), debug: Some(\"lo:index\") }) + Immediate(U8, Number(1)) => FrameOffset(16, 9)\n\tSTA\t$DFFE\n\tLDA\t$F7, X\n\tCLC\t\n\tADC\t#1\n\t; add Memory(MemoryData { base_type: U8, location: FrameOffset(16, 3), debug: Some(\"hi:index\") }) + Immediate(U8, Number(0)) => FrameOffset(16, 10)\n\tSTA\t$FE, X\n\tLDA\t$F8, X\n\tADC\t#0\n\t; os.hsl:77:9: index = index + 1;\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(16, 10), debug: None }) => FrameOffset(16, 3)\n\t; copy Memory(MemoryData { base_type: U8, location: FrameOffset(16, 9), debug: None }) => FrameOffset(16, 2)\n\tSTA\t$F8, X\n\tSTA\t$FF, X\n\tLDA\t$FE, X\n\t; os.hsl:74:5: while str[index] != 0 do\n\t; goto 48\n\tSTA\t$F7, X\n\tJMP\t__L000030_\n\n__L00003A_:\n\n__L00003B_:\n\t; os.hsl:79:5: return;\n\t; rts\n\tRTS\t\n\nkernel_main:\n\n__L00003C_:\n\t; os.hsl:83:5: video_init();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1806 }, offset: FrameSize(15) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 1806 }, destination: UnresolvedGlobal(15) }\n\tSTA\t$00\n\tJSR\tvideo_init\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1806 }, offset: NegativeFrameSize(15) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; os.hsl:84:5: memtest();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1824 }, offset: FrameSize(11) }\n\tSTA\t$00\n\tCLC\t\n\tADC\t#9\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 1824 }, destination: UnresolvedGlobal(11) }\n\tSTA\t$00\n\tJSR\tmemtest\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1824 }, offset: NegativeFrameSize(11) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#247\n\tTAX\t\n\t; copy Memory(MemoryData { base_type: U8, location: Global(1), debug: None }) => FrameOffset(19, 0)\n\tSTA\t$00\n\tLDA\t$0001\n\tLDX\t$00\n\t; os.hsl:85:5: logo();\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1839 }, offset: FrameSize(21) }\n\tSTA\t$FF, X\n\tTXA\t\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 1839 }, destination: UnresolvedGlobal(21) }\n\tSTA\t$00\n\tJSR\tlogo\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 1839 }, offset: NegativeFrameSize(21) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#0\n\tTAX\t\n\t; os.hsl:86:5: return;\n\t; rts\n\tSTA\t$00\n\tRTS\t\n\nlogo:\n\n__L00003E_:\n\t; os.hsl:100:5: video_printstr(logo_str);\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 2368 }, offset: FrameSize(16) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#11\n\tTAX\t\n\t; copy Memory(MemoryData { base_type: U8, location: UnresolvedGlobalHighByte(20), debug: None }) => FrameOffset(16, 1)\n\tSTA\t$00\n\tLDA\t#>logo_str\n\tLDX\t$00\n\t; copy Memory(MemoryData { base_type: U8, location: UnresolvedGlobalLowByte(20), debug: None }) => FrameOffset(16, 0)\n\tSTA\t$F6, X\n\tLDA\t#<logo_str\n\t; jsr JumpRoutineData { tag: SrcTag { unit: 0, offset: 2368 }, destination: UnresolvedGlobal(16) }\n\tSTA\t$F5, X\n\tJSR\tvideo_printstr\n\t; add_dsp AddToDataStackPointerData { tag: SrcTag { unit: 0, offset: 2368 }, offset: NegativeFrameSize(16) }\n\tLDA\t$00\n\tCLC\t\n\tADC\t#245\n\tTAX\t\n\t; os.hsl:101:5: return;\n\t; rts\n\tSTA\t$00\n\tRTS\t\n\t; os.hsl:104:1: inline_asm \".include \\\"memtest.asm\\\"\";\n\t; inline_asm\n\t.include \"memtest.asm\"\n\nlogo_str:\t.byte\tn\n.org\t$FFFA\n.vector\thalt\n.vector\tentry\n.vector\thalt\n"},{"id":1,"name":"memtest.asm","source":"; Tests the zeropage\nmemtest_zeropage:\n\t; Test 0x0000 alone so that it can be used the rest of the time for iteration\n\tLDA\t#$55\n\tSTA\t$00\n\tLDA\t#$00\n\tLDA\t$00\n\tCMP\t#$55\n\tBEQ\t_memtest_zero_page\n\tJMP\t_memtest_hlt\n\n_memtest_zero_page:\n\t;\n\t; Test the zero page\n\t;\n\tLDX\t#$01\n_zp_lp1:\t\t\t; Iterate over the entire zero page and store/load the test pattern\n\tLDA\t#$55\n\tSTA\t($00, X)\n\tINX\n\tBNE\t_zp_lp1\n\n\tLDA\t#$00\n\tLDX\t#$01\n_zp_lp2:\n\tLDA\t($00, X)\n\tCMP\t#$55\n\tBEQ\t_zp_pass\n\tJMP\t_memtest_hlt\n_zp_pass:\n\tINX\n\tBNE\t_zp_lp2\n\tJMP\tpost_memtest_zeropage\n\n; There's not much we can do if the zeropage is broken, so just halt\n_memtest_hlt:\n\tJMP\t_memtest_hlt\n"}]},"entries":[{"unit":0,"offset":79,"line":10,"address":57344},{"unit":0,"offset":174,"line":16,"address":57347},{"unit":0,"offset":184,"line":17,"address":57349},{"unit":0,"offset":280,"line":21,"address":57350},{"unit":0,"offset":420,"line":24,"address":57352},{"unit":0,"offset":429,"line":25,"address":57354},{"unit":0,"offset":435,"line":26,"address":57355},{"unit":0,"offset":443,"line":27,"address":57357},{"unit":0,"offset":548,"line":29,"address":57358},{"unit":0,"offset":557,"line":30,"address":57360},{"unit":0,"offset":683,"line":32,"address":57363},{"unit":0,"offset":692,"line":33,"address":57365},{"unit":0,"offset":698,"line":34,"address":57366},{"unit":0,"offset":708,"line":35,"address":57368},{"unit":0,"offset":752,"line":38,"address":57369},{"unit":0,"offset":761,"line":39,"address":57371},{"unit":0,"offset":829,"line":46,"address":57374},{"unit":0,"offset":953,"line":53,"address":57377},{"unit":0,"offset":961,"line":54,"address":57379},{"unit":0,"offset":1025,"line":56,"address":57381},{"unit":0,"offset":1037,"line":57,"address":57383},{"unit":0,"offset":1308,"line":64,"address":57385},{"unit":0,"offset":1317,"line":65,"address":57387},{"unit":0,"offset":1329,"line":66,"address":57389},{"unit":0,"offset":1339,"line":67,"address":57391},{"unit":0,"offset":1601,"line":72,"address":57393},{"unit":0,"offset":1610,"line":73,"address":57395},{"unit":0,"offset":1622,"line":74,"address":57397},{"unit":0,"offset":1632,"line":75,"address":57399},{"unit":0,"offset":1754,"line":80,"address":57401},{"unit":0,"offset":1762,"line":81,"address":57403},{"unit":0,"offset":1782,"line":83,"address":57405},{"unit":0,"offset":1794,"line":84,"address":57407},{"unit":0,"offset":1916,"line":89,"address":57410},{"unit":0,"offset":1924,"line":90,"address":57412},{"unit":0,"offset":1933,"line":91,"address":57414},{"unit":0,"offset":2105,"line":96,"address":57416},{"unit":0,"offset":2114,"line":97,"address":57418},{"unit":0,"offset":2126,"line":98,"address":57420},{"unit":0,"offset":2337,"line":103,"address":57422},{"unit":0,"offset":2346,"line":104,"address":57424},{"unit":0,"offset":2355,"line":105,"address":57426},{"unit":0,"offset":2421,"line":108,"address":57428},{"unit":0,"offset":2435,"line":109,"address":57431},{"unit":0,"offset":2798,"line":116,"address":57434},{"unit":0,"offset":2807,"line":117,"address":57436},{"unit":0,"offset":2819,"line":118,"address":57438},{"unit":0,"offset":2833,"line":119,"address":57441},{"unit":0,"offset":2842,"line":120,"address":57443},{"unit":0,"offset":2967,"line":125,"address":57445},{"unit":0,"offset":2975,"line":126,"address":57447},{"unit":0,"offset":2995,"line":128,"address":57449},{"unit":0,"offset":3007,"line":129,"address":57451},{"unit":0,"offset":3132,"line":134,"address":57454},{"unit":0,"offset":3140,"line":135,"address":57456},{"unit":0,"offset":3149,"line":136,"address":57458},{"unit":0,"offset":3321,"line":141,"address":57460},{"unit":0,"offset":3330,"line":142,"address":57462},{"unit":0,"offset":3342,"line":143,"address":57464},{"unit":0,"offset":3444,"line":148,"address":57466},{"unit":0,"offset":3459,"line":150,"address":57468},{"unit":0,"offset":3468,"line":151,"address":57470},{"unit":0,"offset":3528,"line":154,"address":57471},{"unit":0,"offset":3736,"line":159,"address":57474},{"unit":0,"offset":3744,"line":160,"address":57476},{"unit":0,"offset":3753,"line":161,"address":57478},{"unit":0,"offset":3941,"line":164,"address":57480},{"unit":0,"offset":3955,"line":165,"address":57483},{"unit":0,"offset":3967,"line":166,"address":57485},{"unit":0,"offset":3973,"line":167,"address":57486},{"unit":0,"offset":4129,"line":169,"address":57488},{"unit":0,"offset":4141,"line":170,"address":57490},{"unit":0,"offset":4153,"line":171,"address":57492},{"unit":0,"offset":4417,"line":175,"address":57494},{"unit":0,"offset":4429,"line":176,"address":57496},{"unit":0,"offset":4441,"line":177,"address":57498},{"unit":0,"offset":4453,"line":178,"address":57500},{"unit":0,"offset":4589,"line":189,"address":57502},{"unit":0,"offset":4604,"line":191,"address":57504},{"unit":0,"offset":4613,"line":192,"address":57506},{"unit":0,"offset":4745,"line":199,"address":57507},{"unit":0,"offset":4836,"line":202,"address":57509},{"unit":0,"offset":4847,"line":203,"address":57512},{"unit":0,"offset":4954,"line":206,"address":57514},{"unit":0,"offset":4965,"line":207,"address":57517},{"unit":0,"offset":5077,"line":210,"address":57519},{"unit":0,"offset":5088,"line":211,"address":57522},{"unit":0,"offset":5179,"line":214,"address":57524},{"unit":0,"offset":5190,"line":215,"address":57527},{"unit":0,"offset":5312,"line":220,"address":57529},{"unit":0,"offset":5323,"line":221,"address":57532},{"unit":0,"offset":5334,"line":222,"address":57535},{"unit":0,"offset":5461,"line":229,"address":57536},{"unit":0,"offset":5469,"line":230,"address":57538},{"unit":0,"offset":5533,"line":232,"address":57540},{"unit":0,"offset":5545,"line":233,"address":57542},{"unit":0,"offset":5728,"line":238,"address":57544},{"unit":0,"offset":5737,"line":239,"address":57546},{"unit":0,"offset":5871,"line":241,"address":57548},{"unit":0,"offset":5883,"line":242,"address":57550},{"unit":0,"offset":6114,"line":244,"address":57552},{"unit":0,"offset":6126,"line":245,"address":57554},{"unit":0,"offset":6132,"line":246,"address":57555},{"unit":0,"offset":6363,"line":248,"address":57557},{"unit":0,"offset":6375,"line":249,"address":57559},{"unit":0,"offset":6387,"line":250,"address":57561},{"unit":0,"offset":6399,"line":251,"address":57563},{"unit":0,"offset":6662,"line":256,"address":57565},{"unit":0,"offset":6671,"line":257,"address":57567},{"unit":0,"offset":6685,"line":258,"address":57569},{"unit":0,"offset":6693,"line":259,"address":57571},{"unit":0,"offset":6813,"line":264,"address":57573},{"unit":0,"offset":6821,"line":265,"address":57575},{"unit":0,"offset":6841,"line":267,"address":57577},{"unit":0,"offset":6853,"line":268,"address":57579},{"unit":0,"offset":6973,"line":273,"address":57582},{"unit":0,"offset":6981,"line":274,"address":57584},{"unit":0,"offset":6990,"line":275,"address":57586},{"unit":0,"offset":7160,"line":280,"address":57588},{"unit":0,"offset":7169,"line":281,"address":57590},{"unit":0,"offset":7181,"line":282,"address":57592},{"unit":0,"offset":7311,"line":287,"address":57594},{"unit":0,"offset":7470,"line":290,"address":57596},{"unit":0,"offset":7479,"line":291,"address":57598},{"unit":0,"offset":7490,"line":292,"address":57601},{"unit":0,"offset":7624,"line":294,"address":57603},{"unit":0,"offset":7636,"line":295,"address":57605},{"unit":0,"offset":7867,"line":297,"address":57607},{"unit":0,"offset":7879,"line":298,"address":57609},{"unit":0,"offset":7885,"line":299,"address":57610},{"unit":0,"offset":8116,"line":301,"address":57612},{"unit":0,"offset":8128,"line":302,"address":57614},{"unit":0,"offset":8140,"line":303,"address":57616},{"unit":0,"offset":8319,"line":306,"address":57618},{"unit":0,"offset":8331,"line":307,"address":57620},{"unit":0,"offset":8521,"line":310,"address":57622},{"unit":0,"offset":8532,"line":311,"address":57625},{"unit":0,"offset":8544,"line":312,"address":57627},{"unit":0,"offset":8550,"line":313,"address":57628},{"unit":0,"offset":8707,"line":315,"address":57630},{"unit":0,"offset":8719,"line":316,"address":57632},{"unit":0,"offset":8731,"line":317,"address":57634},{"unit":0,"offset":8995,"line":321,"address":57636},{"unit":0,"offset":9007,"line":322,"address":57638},{"unit":0,"offset":9019,"line":323,"address":57640},{"unit":0,"offset":9083,"line":326,"address":57642},{"unit":0,"offset":9095,"line":327,"address":57644},{"unit":0,"offset":9168,"line":334,"address":57647},{"unit":0,"offset":9333,"line":341,"address":57648},{"unit":0,"offset":9342,"line":342,"address":57650},{"unit":0,"offset":9348,"line":343,"address":57651},{"unit":0,"offset":9356,"line":344,"address":57653},{"unit":0,"offset":9462,"line":346,"address":57654},{"unit":0,"offset":9471,"line":347,"address":57656},{"unit":0,"offset":9597,"line":349,"address":57659},{"unit":0,"offset":9606,"line":350,"address":57661},{"unit":0,"offset":9612,"line":351,"address":57662},{"unit":0,"offset":9620,"line":352,"address":57664},{"unit":0,"offset":9755,"line":355,"address":57665},{"unit":0,"offset":9764,"line":356,"address":57667},{"unit":0,"offset":9770,"line":357,"address":57668},{"unit":0,"offset":9778,"line":358,"address":57670},{"unit":0,"offset":9884,"line":360,"address":57671},{"unit":0,"offset":9893,"line":361,"address":57673},{"unit":0,"offset":10016,"line":363,"address":57676},{"unit":0,"offset":10025,"line":364,"address":57678},{"unit":0,"offset":10031,"line":365,"address":57679},{"unit":0,"offset":10041,"line":366,"address":57681},{"unit":0,"offset":10148,"line":368,"address":57682},{"unit":0,"offset":10157,"line":369,"address":57684},{"unit":0,"offset":10168,"line":370,"address":57686},{"unit":0,"offset":10303,"line":373,"address":57688},{"unit":0,"offset":10315,"line":374,"address":57690},{"unit":0,"offset":10321,"line":375,"address":57691},{"unit":0,"offset":10327,"line":376,"address":57692},{"unit":0,"offset":10335,"line":377,"address":57694},{"unit":0,"offset":10441,"line":379,"address":57695},{"unit":0,"offset":10450,"line":380,"address":57697},{"unit":0,"offset":10570,"line":382,"address":57700},{"unit":0,"offset":10579,"line":383,"address":57702},{"unit":0,"offset":10585,"line":384,"address":57703},{"unit":0,"offset":10593,"line":385,"address":57705},{"unit":0,"offset":10630,"line":388,"address":57706},{"unit":0,"offset":10639,"line":389,"address":57708},{"unit":0,"offset":10810,"line":396,"address":57709},{"unit":0,"offset":10819,"line":397,"address":57711},{"unit":0,"offset":10825,"line":398,"address":57712},{"unit":0,"offset":10834,"line":399,"address":57714},{"unit":0,"offset":10960,"line":401,"address":57715},{"unit":0,"offset":10969,"line":402,"address":57717},{"unit":0,"offset":10985,"line":403,"address":57719},{"unit":0,"offset":11113,"line":405,"address":57721},{"unit":0,"offset":11125,"line":406,"address":57723},{"unit":0,"offset":11241,"line":408,"address":57725},{"unit":0,"offset":11253,"line":409,"address":57727},{"unit":0,"offset":11383,"line":411,"address":57730},{"unit":0,"offset":11392,"line":412,"address":57732},{"unit":0,"offset":11398,"line":413,"address":57733},{"unit":0,"offset":11408,"line":414,"address":57735},{"unit":0,"offset":11446,"line":417,"address":57736},{"unit":0,"offset":11455,"line":418,"address":57738},{"unit":1,"offset":119,"line":4,"address":57739},{"unit":1,"offset":129,"line":5,"address":57741},{"unit":1,"offset":138,"line":6,"address":57743},{"unit":1,"offset":148,"line":7,"address":57745},{"unit":1,"offset":157,"line":8,"address":57747},{"unit":1,"offset":167,"line":9,"address":57749},{"unit":1,"offset":191,"line":10,"address":57751},{"unit":1,"offset":258,"line":16,"address":57754},{"unit":1,"offset":347,"line":18,"address":57756},{"unit":1,"offset":357,"line":19,"address":57758},{"unit":1,"offset":371,"line":20,"address":57760},{"unit":1,"offset":376,"line":21,"address":57761},{"unit":1,"offset":390,"line":23,"address":57763},{"unit":1,"offset":400,"line":24,"address":57765},{"unit":1,"offset":419,"line":26,"address":57767},{"unit":1,"offset":433,"line":27,"address":57769},{"unit":1,"offset":443,"line":28,"address":57771},{"unit":1,"offset":457,"line":29,"address":57773},{"unit":1,"offset":485,"line":31,"address":57776},{"unit":1,"offset":490,"line":32,"address":57777},{"unit":1,"offset":503,"line":33,"address":57779},{"unit":1,"offset":614,"line":37,"address":57782}]}